/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.blitz.fontcreator.gui;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.font.FontRenderContext;
import java.awt.font.TextLayout;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.event.ListDataListener;

/**
 *
 * @author blitzter
 */
public class FontLoader extends javax.swing.JFrame {

    /**
     * Creates new form FontLoader
     */
    public FontLoader() {
        initComponents();
        GraphicsEnvironment graEnv = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fontNames = graEnv.getAvailableFontFamilyNames();
        String[] choices = new String[fontNames.length+1];
        choices[0] = "None";
        System.arraycopy(fontNames, 0, choices, 1, fontNames.length);
        for(int i = 0; i < fontNames.length; i++){
            fontChooser.addItem(fontNames[i]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        fontChooserLabel = new javax.swing.JLabel();
        fontChooser = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        fontPreview = new javax.swing.JTextArea();
        createFont = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        fontSize = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        fontStyle = new javax.swing.JComboBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Font Creator");

        fontChooserLabel.setText("Choose a Font");

        fontChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choose..." }));
        fontChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontChooserActionPerformed(evt);
            }
        });

        fontPreview.setColumns(20);
        fontPreview.setFont(new java.awt.Font("Arial", 0, 8)); // NOI18N
        fontPreview.setLineWrap(true);
        fontPreview.setRows(5);
        fontPreview.setText("0123456789 abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        jScrollPane1.setViewportView(fontPreview);

        createFont.setText("Create");
        createFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createFontActionPerformed(evt);
            }
        });

        jLabel1.setText("Size");

        fontSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "40", "41", "42", "", "", "" }));
        fontSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSizeActionPerformed(evt);
            }
        });

        jLabel2.setText("Style");

        fontStyle.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PLAIN", "ITALIC", "BOLD", "BOLD|ITALIC" }));
        fontStyle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontStyleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fontChooserLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(createFont)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fontChooser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fontStyle, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fontChooser)
                    .addComponent(fontChooserLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fontSize)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fontStyle)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createFont)
                .addContainerGap())
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void fontSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSizeActionPerformed
        System.out.println("fontSize Action Happened"+evt.getActionCommand());
        if(evt.getActionCommand()=="comboBoxChanged" && !fontSize.getSelectedItem().toString().contains("Choose")){
            fontPreview.setFont(fontPreview.getFont().deriveFont(Float.parseFloat(fontSize.getSelectedItem().toString())));
        }
    }//GEN-LAST:event_fontSizeActionPerformed

    private void fontChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontChooserActionPerformed
        System.out.println("fontChooser Action Happened"+evt.getActionCommand());        // TODO add your handling code here:
        if(evt.getActionCommand()=="comboBoxChanged" && !fontChooser.getSelectedItem().toString().contains("Choose")){
            fontPreview.setFont(new Font(fontChooser.getSelectedItem().toString(),Font.PLAIN,fontPreview.getFont().getSize()));
        }
    }//GEN-LAST:event_fontChooserActionPerformed

    private void fontStyleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontStyleActionPerformed
        System.out.println("fontStyle Action Happened"+evt.getActionCommand());        // TODO add your handling code here:
        if(evt.getActionCommand()=="comboBoxChanged"){
            switch(fontStyle.getSelectedItem().toString()){
                case "PLAIN":
                    fontPreview.setFont(fontPreview.getFont().deriveFont(Font.PLAIN));
                    break;
                case "BOLD":
                    fontPreview.setFont(fontPreview.getFont().deriveFont(Font.BOLD));
                    break;
                case "ITALIC":
                    fontPreview.setFont(fontPreview.getFont().deriveFont(Font.ITALIC));
                    break;
                case "BOLD|ITALIC":
                    fontPreview.setFont(fontPreview.getFont().deriveFont(Font.BOLD | Font.ITALIC));
                    break;
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_fontStyleActionPerformed

    private void createFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createFontActionPerformed
        String str = "";
        Font font = fontPreview.getFont();
        FontRenderContext frc = new FontRenderContext(null, false, false);
        for(int i=32;i<128;i++){
            str += (char)i;
        }
        int count = str.length();
        System.out.println("String is "+str);
        BufferedImage buffer = new BufferedImage(1,1,BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = buffer.createGraphics();
        g2.setFont(font);
        g2.setColor(Color.BLACK);
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_OFF);
        FontRenderContext fc = g2.getFontRenderContext(); 
        Rectangle2D bounds = font.getStringBounds(str,fc);
        g2.dispose();
        //TextLayout layout = new TextLayout(str, font, frc);
        //Rectangle rct = layout.getPixelBounds(null, 0, 0);
        //Rectangle2D rct1 = layout.getBounds();
        //System.out.println(rct);
        //System.out.println(rct1);
        BufferedImage bufferedImage = new BufferedImage((int)bounds.getWidth(), (int)bounds.getHeight(), BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = bufferedImage.createGraphics();
        //layout.draw(g2d, 0, -rct.y);
        g2d.setFont(font);
        g2d.setColor(Color.BLACK);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_OFF);
        g2d.drawString(str,0,(int)-bounds.getY());
        g2d.dispose();
        try {
            /*Complete String as png*/
            File file = new File("newimage.png");
            ImageIO.write(bufferedImage, "png", file);

     
            int charWidth = ((int)bounds.getWidth())/count;
            int charHeight = (int)bounds.getHeight();
            
            String fontName = font.getFontName().replace(" ", "").toLowerCase()+charWidth+"x"+charHeight;
            
            //start the header file
            File fontHeader = new File(fontName+".h");
            if(fontHeader.exists()){
                fontHeader.delete();
                fontHeader = new File(fontName+".h");
            }
            BufferedWriter br = new BufferedWriter(new FileWriter(fontHeader));
            
            br.write("#include <avr/pgmspace.h>\n");
                    
            br.write("static uint8_t "+fontName+"[] PROGMEM = {");
            
            for(int i=0;i<count;i++){
                BufferedImage bi = bufferedImage.getSubimage(i*charWidth, 0, charWidth, charHeight);
                /*Each character as a separate png*/
                File f = new File("temp/"+(i+32)+".png");
                ImageIO.write(bi, "png", f);
                Raster ras = bi.getRaster();
                br.write("\n\n// '"+((char)(i+32))+"'\n");
                String binstr = "";
                int mod = 1;
                for(int j=0;j<charHeight;j++){
                    for(int k = 0;k<charWidth;k++){
                      //br.write(""+((bi.getRGB(k, j)==0)?0:1));
                      binstr += ""+((bi.getRGB(k, j)==0)?0:1);
                      if((binstr.length()+1)%9==0){
                          binstr+=",";
                      }
                      //if(mod%8==0){
                          //br.write(","+(((int)mod/8)%4==0?"\n":"")+" B");
                      //}
                      //mod++;
                    }
                    //System.out.println();
                }
                //if(mod%8!=0){
                //    do{
                      //br.write("0");
                      //mod++;
                //    }while(mod%8!=0);
                //}
                //br.write("0, \n\n");
                System.out.println("\n "+((char)(i+32)));
                String[] parts = binstr.split(",");
                for(int part=0; part< parts.length; part++){
                    if(part==(parts.length-1)&&(parts[part].length()!=8)){
                        while(parts[part].length()!=8){
                            parts[part] += "0";
                        }
                    }
                    
                    String hex = "0b"+new StringBuilder(parts[part]).reverse().toString();
                    //String hex = "0x"+Integer.toHexString(Integer.parseInt(new StringBuilder(parts[part]).reverse().toString(), 2)).toUpperCase();
                    br.write(hex);
                    if(i==(count-1)&&part==(parts.length-1)){
                        br.write("\n ");
                    } else {
                        br.write(", ");
                    }
                    if((part+1)%10==0){
                        br.write("\n");
                    }
                }
            }
            br.write("};");
            br.flush();

        } catch (IOException e) {
            e.printStackTrace();
        }
        
        /*for(int i=32;i<128;i++){
            BufferedImage bufferedImage = new BufferedImage(rct.width, rct.height, BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = bufferedImage.createGraphics();
            
            //g2d.drawString(""+(char)i, 0, 0);
            layout.draw(g2d, 0, -rct.y);
            g2d.dispose();
            Raster r = bufferedImage.getRaster();
            double temp[] = null;
            double pixels[] = r.getPixels(0, 0, rct.width, rct.height, temp);
            System.out.println("Printing Char "+(char)i);
            for(int j=0;j<pixels.length;j++){
                System.out.print(pixels[j]>0?1:0);
                if((j+1)%rct.width==0){
                    System.out.println("");
                }
            }
        }*/
    }//GEN-LAST:event_createFontActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FontLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FontLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FontLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FontLoader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FontLoader().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton createFont;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JComboBox fontChooser;
    private javax.swing.JLabel fontChooserLabel;
    private javax.swing.JTextArea fontPreview;
    private javax.swing.JComboBox fontSize;
    private javax.swing.JComboBox fontStyle;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
}
